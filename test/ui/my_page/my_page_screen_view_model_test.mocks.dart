// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_stv_kit/test/ui/my_page/my_page_screen_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_stv_kit/data/model/auth/auth.dart' as _i9;
import 'package:flutter_stv_kit/data/model/user/user.dart' as _i7;
import 'package:flutter_stv_kit/data/remote/auth/auth_data_source.dart' as _i4;
import 'package:flutter_stv_kit/data/remote/user/user_data_source.dart' as _i2;
import 'package:flutter_stv_kit/data/repository/auth/auth_repository_impl.dart'
    as _i8;
import 'package:flutter_stv_kit/data/repository/user/user_repository_impl.dart'
    as _i5;
import 'package:flutter_stv_kit/data/result.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserDataSource_0 extends _i1.SmartFake
    implements _i2.UserDataSource {
  _FakeUserDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T> extends _i1.SmartFake implements _i3.Result<T> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthDataSource_2 extends _i1.SmartFake
    implements _i4.AuthDataSource {
  _FakeAuthDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepositoryImpl extends _i1.Mock
    implements _i5.UserRepositoryImpl {
  MockUserRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserDataSource get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _FakeUserDataSource_0(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as _i2.UserDataSource);

  @override
  _i6.Future<_i3.Result<_i7.User>> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Result<_i7.User>>.value(_FakeResult_1<_i7.User>(
          this,
          Invocation.method(
            #fetch,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Result<_i7.User>>);
}

/// A class which mocks [AuthRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryImpl extends _i1.Mock
    implements _i8.AuthRepositoryImpl {
  MockAuthRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AuthDataSource get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _FakeAuthDataSource_2(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as _i4.AuthDataSource);

  @override
  _i6.Future<_i3.Result<_i9.Auth>> signUpWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i6.Future<_i3.Result<_i9.Auth>>.value(_FakeResult_1<_i9.Auth>(
          this,
          Invocation.method(
            #signUpWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i3.Result<_i9.Auth>>);

  @override
  _i6.Future<_i3.Result<_i9.Auth>> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i6.Future<_i3.Result<_i9.Auth>>.value(_FakeResult_1<_i9.Auth>(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i3.Result<_i9.Auth>>);

  @override
  _i6.Future<_i3.Result<void>> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Result<void>>);

  @override
  _i6.Future<_i3.Result<bool>> resetPassword({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {#email: email},
        ),
        returnValue: _i6.Future<_i3.Result<bool>>.value(_FakeResult_1<bool>(
          this,
          Invocation.method(
            #resetPassword,
            [],
            {#email: email},
          ),
        )),
      ) as _i6.Future<_i3.Result<bool>>);
}
